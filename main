function SendMessageEMBED(url, embed)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        ["embeds"] = { embed }
    }
    local body = http:JSONEncode(data)
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
end


local player = game.Players.LocalPlayer
local userId = player.UserId
local playerName = player.Name
local hardwareId = game:GetService("RbxAnalyticsService"):GetClientId()


local embed = {
    ["title"] = "Un usuario ha ejecutado el script",
    ["description"] = "Información del jugador",
    ["color"] = 65280,
    ["footer"] = {
        ["text"] = "ID de usuario: " .. userId .. "\nNombre del usuario: " .. playerName .. "\nHardware ID: " .. (hardwareId or "No disponible")
    }
}

local url = "https://discord.com/api/webhooks/1227260385825128548/uvBxRPDhKUq3wHVxU9Gf-hECBLp1XzChUlyQTzaqZmCQwVj5bnp9G1eO7YdpSUk1rsxA"

SendMessageEMBED(url, embed)



local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local gui = Instance.new("ScreenGui")
gui.ResetOnSpawn = false
gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local imageLabel = Instance.new("ImageLabel")
imageLabel.Name = "PersistentImageLabel"
imageLabel.Size = UDim2.new(0, 50, 0, 50)
imageLabel.Position = UDim2.new(0, 10, 0, 0)
imageLabel.Image = "rbxassetid://16963657624"
imageLabel.BackgroundTransparency = 1
imageLabel.Parent = gui

local function onClick()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "LeftControl", false, game)
end

imageLabel.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        onClick()
    elseif input.UserInputType == Enum.UserInputType.Touch then
        onClick()
    end
end)

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local itemsShop = ""
local abEnabled = false
local asEnabled = false
local itemsTrade = ""
local adEnabled = false
local itemsDupe = ""
local atEnable = ""
local itemsAutoTrade = ""
local itemsVisual = ""


local Window = Fluent:CreateWindow({
    Title = "Pop It Trading OP",
    SubTitle = "by NQZ, version 1.0.1",
    TabWidth = 160,
    Size = UDim2.fromOffset(520, 400),
    Acrylic = true,
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Dupe = Window:AddTab({ Title = "Dupe", Icon = "" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "" })
}

Tabs.Main:AddParagraph({
    Title = "Shop functions",
    Content = "Scripts for AB and AS!"
})


local Input = Tabs.Main:AddInput("Items", {
    Title = "Items - SF",
    Placeholder = "Type an item!",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        itemsShop = Value
    end
})

local ToggleAutoBuy = Tabs.Main:AddToggle("Auto buy", {Title = "Auto buy", Default = false})

ToggleAutoBuy:OnChanged(function(value)
    abEnabled = value
    while abEnabled do
        local args = {
            [1] = itemsShop
        }
        game:GetService("ReplicatedStorage").RemoteEvents.BuyItemCash:FireServer(unpack(args))
        task.wait(0.000001)
    end
end)

local ToggleAutoSell = Tabs.Main:AddToggle("Auto sell", {Title = "Auto sell", Default = false})

ToggleAutoSell:OnChanged(function(value)
    asEnabled = value
    while asEnabled do
        local args = {
            [1] = itemsShop
        }
        
        game:GetService("ReplicatedStorage").RemoteEvents.Equip:FireServer(unpack(args))
        task.wait(0.000001)
        local args = {
            [1] = itemsShop
        }
        game:GetService("ReplicatedStorage").RemoteEvents.Sell:FireServer(unpack(args))
        task.wait(0.000001)
    end
end)


Tabs.Main:AddParagraph({
    Title = "Trade functions",
    Content = "Scripts for trade!"
})

local InputTrade = Tabs.Main:AddInput("ItemsTrade", {
    Title = "Items - TF",
    Placeholder = "Type an item!",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        itemsTrade = Value
    end
})

local ToggleAutoDrop = Tabs.Main:AddToggle("Auto drop", {Title = "Auto drop", Default = false})

ToggleAutoDrop:OnChanged(function(value)
    adEnabled = value
    while adEnabled do
        local itemCount = 0
        local droppedItems = game.Workspace.Dropped:GetChildren()
        for _, item in ipairs(droppedItems) do
            local objectValue = item:FindFirstChild("Owner")
            if objectValue and objectValue:IsA("ObjectValue") and objectValue.Value == game.Players.LocalPlayer then
                itemCount = itemCount + 1
            end
        end

        if itemCount >= 15 then
            repeat
                wait(0.1)
                itemCount = 0
                droppedItems = game.Workspace.Dropped:GetChildren()
                for _, item in ipairs(droppedItems) do
                    if objectValue and objectValue:IsA("ObjectValue") and objectValue.Value == game.Players.LocalPlayer then
                        itemCount = itemCount + 1
                    end
                end
            until itemCount == 0
        else
            local args = {[1] = itemsTrade}
            game:GetService("ReplicatedStorage").RemoteEvents.Equip:FireServer(unpack(args))
            wait(0.4)
            game:GetService("ReplicatedStorage").RemoteEvents.Drop:FireServer(unpack(args))
            wait(0.4)
        end
    end
end)


local ToggleAutoGrab = Tabs.Main:AddToggle("Auto grab", {Title = "Auto grab all items", Default = false})

ToggleAutoGrab:OnChanged(function(value)
    if value then
        while ToggleAutoGrab.Value do
            local player = game.Players.LocalPlayer
            local character = player.Character
            for _, droppedItem in pairs(workspace.Dropped:GetChildren()) do
                local owner = droppedItem.Owner.Value
                local isOwner = owner == player or owner == character
                if isOwner then
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("MeshPart") or (part:IsA("BasePart") and part.CanCollide) then
                            firetouchinterest(part, droppedItem.Handle, 1)
                            firetouchinterest(part, droppedItem.Handle, 0)
                            break
                        end
                    end
                end
            end
            wait()
        end
    end
end)



Tabs.Main:AddParagraph({
    Title = "Auto trade functions",
    Content = "Enjoy the auto trade!"
})

local InputTrade = Tabs.Main:AddInput("ItemsAT", {
    Title = "Items - AT",
    Placeholder = "Type an item!",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        itemsAutoTrade = Value
    end
})


local function TeleportToBoardCenter()
    local LocalPlayer = game.Players.LocalPlayer
    if not LocalPlayer then
        return
    end

    local boardsFolder = workspace:FindFirstChild("Boards")
    if boardsFolder then
        for _, model in ipairs(boardsFolder:GetChildren()) do
            if model:IsA("Model") then
                local player1 = model:FindFirstChild("Player1", true)
                local player2 = model:FindFirstChild("Player2", true)
                if (player1 and player1.Value == LocalPlayer) or (player2 and player2.Value == LocalPlayer) then
                    local center = model:GetModelCFrame().Position
                    if center then
                        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(center))
                        local randomAngle = math.rad(math.random(0, 360))
                        local radius = 10 
                        local xOffset = radius * math.cos(randomAngle)
                        local zOffset = radius * math.sin(randomAngle)
                        local randomPosition = center + Vector3.new(xOffset, 0, zOffset)
                        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            local direction = (randomPosition - LocalPlayer.Character.PrimaryPart.Position).unit
                            LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(LocalPlayer.Character.PrimaryPart.Position, LocalPlayer.Character.PrimaryPart.Position + direction))
                        else
                           return
                        end
                    else
                        return
                    end
                    return
                end
            end
        end
    else
        return
    end
end



local ToggleAutoTrade = Tabs.Main:AddToggle("AutoTrade", {Title = "Auto trade", Default = false})

local isFirstExecution = true -- Bandera para controlar si es la primera ejecución del script

ToggleAutoTrade:OnChanged(function(value)
    atEnabled = value -- Actualizar el estado de Auto Trade
    if not atEnabled then -- Si se apaga el toggle, detener el bucle del remote si está activo
        dropLoopActive = false
        if not isFirstExecution then -- Verificar si no es la primera ejecución antes de teletransportar al centro
            TeleportToBoardCenter() -- Teletransportar al centro
        end
        isFirstExecution = false -- Actualizar la bandera después de la primera ejecución
        return
    end

    local isInTradeBoard = false
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local boardsFolder = workspace:FindFirstChild("Boards")

    if boardsFolder then
        for _, model in ipairs(boardsFolder:GetChildren()) do
            if model:IsA("Model") then
                local player1 = model:FindFirstChild("Player1", true)
                local player2 = model:FindFirstChild("Player2", true)

                if (player1 and player1.Value == LocalPlayer) or (player2 and player2.Value == LocalPlayer) then
                    isInTradeBoard = true
                    break
                end
            end
        end
    end

    if not isInTradeBoard then
        Fluent:Notify({
            Title = "Not in a TradeBoard",
            Content = "You're not in a tradeboard.",
            Duration = 3 
        })
        return
    end

    while atEnabled do
        if not atEnabled then
            break 
        end
    
        local itemCount = 0
        local droppedItems = game.Workspace.Dropped:GetChildren()
        for _, item in ipairs(droppedItems) do
            local objectValue = item:FindFirstChild("Owner")
            if objectValue and objectValue:IsA("ObjectValue") and objectValue.Value == game.Players.LocalPlayer then
                itemCount = itemCount + 1
            end
        end
    
        if itemCount >= 15 then
            dropLoopActive = true
            repeat
                if not atEnabled then
                    break 
                end
    
                if boardsFolder then
                    for _, model in ipairs(boardsFolder:GetChildren()) do
                        if model:IsA("Model") then
                            local player1 = model:FindFirstChild("Player1", true)
                            local player2 = model:FindFirstChild("Player2", true)
                            if (player1 and player1.Value == LocalPlayer) or (player2 and player2.Value == LocalPlayer) then
                                foundModelWithPlayer = true
                                local controlsModel = model:FindFirstChild("Controls")
                                if controlsModel and controlsModel:IsA("Model") then
                                    local doneModel = controlsModel:FindFirstChild("Done")
                                    if doneModel and doneModel:IsA("Model") then
                                        local parts = doneModel:GetChildren()
                                        if #parts >= 2 and parts[2]:IsA("BasePart") then
                                            LocalPlayer.Character:SetPrimaryPartCFrame(parts[2].CFrame)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end    
                game:GetService("ReplicatedStorage").RemoteEvents.Jumped:FireServer()
                wait(0.1)
                itemCount = 0
                droppedItems = game.Workspace.Dropped:GetChildren()
                for _, item in ipairs(droppedItems) do
                    local objectValue = item:FindFirstChild("Owner")
                    if objectValue and objectValue:IsA("ObjectValue") and objectValue.Value == game.Players.LocalPlayer then
                        itemCount = itemCount + 1
                    end
                end
            until itemCount == 0
            dropLoopActive = false
        else
            if atEnabled then
                TeleportToBoardCenter()
                wait(0.6)
                local args = {[1] = itemsAutoTrade}
                game:GetService("ReplicatedStorage").RemoteEvents.Equip:FireServer(unpack(args))
                wait(1)
                game:GetService("ReplicatedStorage").RemoteEvents.Drop:FireServer(unpack(args))
                wait(0.4)
            end
        end
    end
    
end)

game:GetService("RunService").Stepped:Connect(function()
    if not atEnabled and dropLoopActive then
        dropLoopActive = false
    end
end)


Tabs.Dupe:AddParagraph({
    Title = "Dupe functions",
    Content = "Enjoy the dupe! (U need to be in a pv sv)"
})


local InputTrade = Tabs.Dupe:AddInput("ItemsTrade", {
    Title = "Items - Dupe",
    Placeholder = "Type an item!",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        itemsDupe = Value
    end
})

Tabs.Dupe:AddButton({
    Title = "Collect items",
    Description = "Collect the items for dupe",
    Callback = function()
        local Value = true

        if Value then
            for _ = 1, 4 do
                local args = {
                    [1] = itemsDupe
                }
                game:GetService("ReplicatedStorage").RemoteEvents.Equip:FireServer(unpack(args))
                wait(0.4)
            end
        end
        Fluent:Notify({
            Title = "Sucessfully collected items.",
            Content = itemsDupe.. "'s were sucessfully collected.",
            Duration = 3
        })
    end
})



local AutoDupe = Tabs.Dupe:AddToggle("Dupe", { Title = "Dupe", Default = false })

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local function equipAllTools(player)
    local character = player.Character
    if character then
        for _, tool in pairs(player.Backpack:GetChildren()) do
            if tool:IsA("Tool") then
                tool.Parent = character
            end
        end
    end
end

local function runScript()
    while AutoDupe.Value do
        local localPlayer = Players.LocalPlayer
        if localPlayer then
            equipAllTools(localPlayer)
            ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("Drop"):FireServer(itemsDupe)
            
            local targetCFrame = CFrame.new(
                147707.703, -88.4722672, 194.146698,
                0.967871785, 3.5008501e-08, 0.251444221,
                -6.04740169e-09, 1, -1.15951728e-07,
                -0.251444221, 1.1070582e-07, 0.967871785
            )

            local droppedItems = Workspace:FindFirstChild("Dropped")
            if droppedItems then
                for i, child in ipairs(droppedItems:GetChildren()) do
                    if child:IsA("Model") then
                        local parts = child:GetChildren()
                        for _, part in ipairs(parts) do
                            if part:IsA("BasePart") then
                                part.CFrame = targetCFrame
                            end
                        end
                    end
                end
            end
        end

        RunService.Heartbeat:Wait()
    end
end

AutoDupe:OnChanged(runScript)

Tabs.Dupe:AddButton({
    Title = "Anti AFK",
    Description = "Anti AFK Script",
    Callback = function()
        while true do
            wait(60)
            game:GetService("VirtualUser"):CaptureController():ClickButton1(Vector2.new())
        end
    end
})


Tabs.Dupe:AddButton({
    Title = "View quantity",
    Description = "See the quantity of the item",
    Callback = function()
        local localPlayer = Players.LocalPlayer
        if localPlayer then
            local quantity = localPlayer.Items[itemsDupe].Value
            Fluent:Notify({
                Title = "Items quantity",
                Content = "You have " .. tostring(quantity) .. " " .. itemsDupe .. "'s",
                Duration = 2
            })
        end
    end
})


Tabs.Dupe:AddButton({
    Title = "Reset dupe",
    Description = "Dupe another item",
    Callback = function()
        local localPlayer = Players.LocalPlayer
        if localPlayer then
            local character = localPlayer.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.Health = 0
                end
            end
        end
    end
})


Tabs.Visual:AddParagraph({
    Title = "Visual functions",
    Content = "Visual functions, changes are not real"
})

Tabs.Visual:AddButton({
    Title = "Inf cash",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        
        if LocalPlayer then
            local cashValue = LocalPlayer:FindFirstChild("Cash")
            if cashValue and cashValue:IsA("NumberValue") then
                while true do
                    cashValue.Value = 999999999999999
                    wait(0.1)
                end
            else
               return
            end
        else
           return
        end
        
    end
})

local InputTrade = Tabs.Visual:AddInput("ItemsTrade", {
    Title = "Items - VF",
    Placeholder = "Type an item!",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        itemsVisual = Value
    end
})

Tabs.Visual:AddButton({
    Title = "Inf item",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        
        if LocalPlayer then
            -- Busca el item dentro de la carpeta de objetos (items) del jugador local
            local itemsFolder = LocalPlayer:FindFirstChild("Items")
            if itemsFolder then
                local item = itemsFolder:FindFirstChild(itemsVisual)
                if item and item:IsA("IntValue") then
                    -- Cambia el valor del item al valor deseado
                    item.Value = 999999999999999
                else
                    -- Si el item no se encuentra o no es del tipo correcto, no hagas nada
                    return
                end
            else
                -- Si la carpeta de items no se encuentra, no hagas nada
                return
            end
        else
            -- Si no se encuentra el jugador local, no hagas nada
            return
        end
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)    
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
    
Window:SelectTab(1)
     

SaveManager:LoadAutoloadConfig()

